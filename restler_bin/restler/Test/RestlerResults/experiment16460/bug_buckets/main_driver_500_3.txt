################################################################################
 main_driver_500

 Hash: main_driver_500_ee21556322e283f5b8d59a5ee8432cf9ea1018db

 To attempt to reproduce this bug using restler, run restler with the command
 line option of --replay_log <path_to_this_log>.
 If an authentication token is required, you must also specify the token_refresh_cmd.

 This log may contain specific values for IDs or names that were generated
 during fuzzing, using the fuzzing dictionary. Such names will be re-played
 without modification. You must update the replay log manually with any changes
 required to execute the requests in your environment (for example, replacing
 pre-created account, subscription, or other resource IDs, as needed).
################################################################################

-> POST //auth/api/register HTTP/1.1\r\nAccept: application/json\r\nHost: 127.0.0.1:5000\r\nContent-Type: application/json\r\n\r\n{\n    "username":"fuzzstring",\n    "password":"fuzzstring"}\r\n
! producer_timing_delay 0
! max_async_wait_time 20
PREVIOUS RESPONSE: 'HTTP/1.0 500 INTERNAL SERVER ERROR\r\nContent-Type: text/html; charset=utf-8\r\nX-XSS-Protection: 0\r\nConnection: close\r\nServer: Werkzeug/2.0.2 Python/3.10.2\r\nDate: Wed, 02 Feb 2022 00:26:00 GMT\r\n\r\n<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"\n  "http://www.w3.org/TR/html4/loose.dtd">\n<html>\n  <head>\n    <title>werkzeug.exceptions.BadRequestKeyError: 400 Bad Request: The browser (or proxy) sent a request that this server could not understand.\nKeyError: &#x27;username&#x27; // Werkzeug Debugger</title>\n    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"\n        type="text/css">\n    <!-- We need to make sure this has a favicon so that the debugger does\n         not accidentally trigger a request to /favicon.ico which might\n         change the application\'s state. -->\n    <link rel="shortcut icon"\n        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">\n    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>\n    <script type="text/javascript">\n      var TRACEBACK = 2342926227184,\n          CONSOLE_MODE = false,\n          EVALEX = true,\n          EVALEX_TRUSTED = false,\n          SECRET = "22TNVTfffW0f0X8pgi8t";\n    </script>\n  </head>\n  <body style="background-color: #fff">\n    <div class="debugger">\n<h1>werkzeug.exceptions.BadRequestKeyError</h1>\n<div class="detail">\n  <p class="errormsg">werkzeug.exceptions.BadRequestKeyError: 400 Bad Request: The browser (or proxy) sent a request that this server could not understand.\nKeyError: &#x27;username&#x27;</p>\n</div>\n<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>\n<div class="traceback">\n  <h3></h3>\n  <ul><li><div class="frame" id="frame-2342926227472">\n  <h4>File <cite class="filename">"C:\\Users\\madal\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">2091</em>,\n      in <code class="function">__call__</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">    </span>def __call__(self, environ: dict, start_response: t.Callable) -&gt; t.Any:</pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>\n<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>\n<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>\n<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>\n<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>\n</div>\n\n<li><div class="frame" id="frame-2342926227376">\n  <h4>File <cite class="filename">"C:\\Users\\madal\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">2076</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line before"><span class="ws">                </span>error = e</pre>\n<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>\n<pre class="line after"><span class="ws">                </span>raise</pre>\n<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>\n<pre class="line after"><span class="ws">        </span>finally:</pre></div>\n</div>\n\n<li><div class="frame" id="frame-2342926227520">\n  <h4>File <cite class="filename">"C:\\Users\\madal\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">2073</em>,\n      in <code class="function">wsgi_app</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>\n<pre class="line before"><span class="ws">        </span>error: t.Optional[BaseException] = None</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>try:</pre>\n<pre class="line before"><span class="ws">                </span>ctx.push()</pre>\n<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>\n<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">                </span>error = e</pre>\n<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>\n<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>\n<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>\n</div>\n\n<li><div class="frame" id="frame-2342926227424">\n  <h4>File <cite class="filename">"C:\\Users\\madal\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1518</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>\n<pre class="line after"><span class="ws">        </span>self,</pre>\n<pre class="line after"><span class="ws">        </span>rv: t.Union[ResponseReturnValue, HTTPException],</pre></div>\n</div>\n\n<li><div class="frame" id="frame-2342926227568">\n  <h4>File <cite class="filename">"C:\\Users\\madal\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1516</em>,\n      in <code class="function">full_dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>\n<pre class="line before"><span class="ws">        </span>try:</pre>\n<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>\n<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>\n<pre class="line before"><span class="ws">            </span>if rv is None:</pre>\n<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>\n<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>\n<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>\n<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>\n</div>\n\n<li><div class="frame" id="frame-2342926227616">\n  <h4>File <cite class="filename">"C:\\Users\\madal\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\\flask\\app.py"</cite>,\n      line <em class="line">1502</em>,\n      in <code class="function">dispatch_request</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>\n<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>\n<pre class="line before"><span class="ws">        </span>):</pre>\n<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>\n<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>\n<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>\n<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>\n<pre class="line after"><span class="ws">        </span>error handling.</pre></div>\n</div>\n\n<li><div class="frame" id="frame-2342926227664">\n  <h4>File <cite class="filename">"C:\\Facultate\\Anul2\\SO\\Intelligent-Espresso-Machine\\rasputin\\auth.py"</cite>,\n      line <em class="line">62</em>,\n      in <code class="function">register_api</code></h4>\n  <div class="source "><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws"></span>@bp.route(&#x27;/api/register&#x27;, methods=[&#x27;POST&#x27;])</pre>\n<pre class="line before"><span class="ws"></span>def register_api():</pre>\n<pre class="line before"><span class="ws">    </span>error = None</pre>\n<pre class="line before"><span class="ws"></span> </pre>\n<pre class="line current"><span class="ws">    </span>username = request.form[&#x27;username&#x27;]</pre>\n<pre class="line after"><span class="ws">    </span>email = request.form[&#x27;email&#x27;]</pre>\n<pre class="line after"><span class="ws">    </span>password = request.form[&#x27;password&#x27;]</pre>\n<pre class="line after"><span class="ws">    </span>confirm_password = request.form[&#x27;confirm_password&#x27;]</pre>\n<pre class="line after"><span class="ws">    </span>db_local = db.get_db()</pre>\n<pre class="line after"><span class="ws"></span> </pre></div>\n</div>\n\n<li><div class="frame" id="frame-2342926227712">\n  <h4>File <cite class="filename">"C:\\Users\\madal\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\\werkzeug\\datastructures.py"</cite>,\n      line <em class="line">377</em>,\n      in <code class="function">__getitem__</code></h4>\n  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>\n<pre class="line before"><span class="ws">        </span>if key in self:</pre>\n<pre class="line before"><span class="ws">            </span>lst = dict.__getitem__(self, key)</pre>\n<pre class="line before"><span class="ws">            </span>if len(lst) &gt; 0:</pre>\n<pre class="line before"><span class="ws">                </span>return lst[0]</pre>\n<pre class="line current"><span class="ws">        </span>raise exceptions.BadRequestKeyError(key)</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">    </span>def __setitem__(self, key, value):</pre>\n<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Like :meth:`add` but removes an existing key first.</pre>\n<pre class="line after"><span class="ws"></span> </pre>\n<pre class="line after"><span class="ws">        </span>:param key: the key for the value.</pre></div>\n</div>\n</ul>\n  <blockquote>werkzeug.exceptions.BadRequestKeyError: 400 Bad Request: The browser (or proxy) sent a request that this server could not understand.\nKeyError: &#x27;username&#x27;</blockquote>\n</div>\n\n<div class="plain">\n    <p>\n      This is the Copy/Paste friendly version of the traceback.\n    </p>\n    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):\n  File &quot;C:\\Users\\madal\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\\flask\\app.py&quot;, line 2091, in __call__\n    return self.wsgi_app(environ, start_response)\n  File &quot;C:\\Users\\madal\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\\flask\\app.py&quot;, line 2076, in wsgi_app\n    response = self.handle_exception(e)\n  File &quot;C:\\Users\\madal\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\\flask\\app.py&quot;, line 2073, in wsgi_app\n    response = self.full_dispatch_request()\n  File &quot;C:\\Users\\madal\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\\flask\\app.py&quot;, line 1518, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File &quot;C:\\Users\\madal\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\\flask\\app.py&quot;, line 1516, in full_dispatch_request\n    rv = self.dispatch_request()\n  File &quot;C:\\Users\\madal\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\\flask\\app.py&quot;, line 1502, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)\n  File &quot;C:\\Facultate\\Anul2\\SO\\Intelligent-Espresso-Machine\\rasputin\\auth.py&quot;, line 62, in register_api\n    username = request.form[&#x27;username&#x27;]\n  File &quot;C:\\Users\\madal\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\\werkzeug\\datastructures.py&quot;, line 377, in __getitem__\n    raise exceptions.BadRequestKeyError(key)\nwerkzeug.exceptions.BadRequestKeyError: 400 Bad Request: The browser (or proxy) sent a request that this server could not understand.\nKeyError: &#x27;username&#x27;</textarea>\n</div>\n<div class="explanation">\n  The debugger caught an exception in your WSGI application.  You can now\n  look at the traceback which led to the error.  <span class="nojavascript">\n  If you enable JavaScript you can also use additional features such as code\n  execution (if the evalex feature is enabled), automatic pasting of the\n  exceptions and much more.</span>\n</div>\n      <div class="footer">\n        Brought to you by <strong class="arthur">DON\'T PANIC</strong>, your\n        friendly Werkzeug powered traceback interpreter.\n      </div>\n    </div>\n\n    <div class="pin-prompt">\n      <div class="inner">\n        <h3>Console Locked</h3>\n        <p>\n          The console is locked and needs to be unlocked by entering the PIN.\n          You can find the PIN printed out on the standard output of your\n          shell that runs the server.\n        <form>\n          <p>PIN:\n            <input type=text name=pin size=14>\n            <input type=submit name=btn value="Confirm Pin">\n        </form>\n      </div>\n    </div>\n  </body>\n</html>\n\n<!--\n\nTraceback (most recent call last):\n  File "C:\\Users\\madal\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\\flask\\app.py", line 2091, in __call__\n    return self.wsgi_app(environ, start_response)\n  File "C:\\Users\\madal\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\\flask\\app.py", line 2076, in wsgi_app\n    response = self.handle_exception(e)\n  File "C:\\Users\\madal\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\\flask\\app.py", line 2073, in wsgi_app\n    response = self.full_dispatch_request()\n  File "C:\\Users\\madal\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\\flask\\app.py", line 1518, in full_dispatch_request\n    rv = self.handle_user_exception(e)\n  File "C:\\Users\\madal\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\\flask\\app.py", line 1516, in full_dispatch_request\n    rv = self.dispatch_request()\n  File "C:\\Users\\madal\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\\flask\\app.py", line 1502, in dispatch_request\n    return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)\n  File "C:\\Facultate\\Anul2\\SO\\Intelligent-Espresso-Machine\\rasputin\\auth.py", line 62, in register_api\n    username = request.form[\'username\']\n  File "C:\\Users\\madal\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\\werkzeug\\datastructures.py", line 377, in __getitem__\n    raise exceptions.BadRequestKeyError(key)\nwerkzeug.exceptions.BadRequestKeyError: 400 Bad Request: The browser (or proxy) sent a request that this server could not understand.\nKeyError: \'username\'\n\n-->\n'

